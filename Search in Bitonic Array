
int BitonicPoint(vector<int> &A,int start,int end)
{
    while(start <= end)
    {
        int mid = (start + end)/2;
        if((A[mid] > A[mid + 1])  && (A[mid] > A[mid - 1]))
            {  
                return mid;}
        
        else if(A[mid] > A[mid + 1])
        {
            return BitonicPoint(A,start,mid-1);
        }
        else
        {
            return BitonicPoint(A,mid+1,end);
        }
        
    }
}

int BinarySearch1(vector<int> &A,int start,int end,int B)
{
    while(start <= end)
    {
        int mid = (start + end)/2;
        
        if(A[mid] == B)
            return mid;
        else if(A[mid] > B)
            end = mid - 1;
        else
            start = mid + 1;
    }
    return -1;
    
}

int BinarySearch2(vector<int> &A,int start,int end,int B)
{
    while(start <= end)
    {
        int mid = (start + end)/2;   
        if(A[mid] == B)
            return mid;
        else if(A[mid] < B)
            end = mid - 1;
        else
            start = mid + 1;
    }
    return -1;
    
}


int Solution::solve(vector<int> &A, int B) 
{
     int Bitonic = BitonicPoint(A,0,A.size()-1);
    if(A[Bitonic] == B)
        return Bitonic;
    if((B > A[A.size() -1]) && (B < A[Bitonic]))
        {return BinarySearch2(A,Bitonic + 1, A.size()-1,B);}
    else
        return BinarySearch1(A,0,Bitonic-1,B);
    
}
