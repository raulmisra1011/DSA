int findPivot(const vector<int> &A)
{
    int start = 0;
    int end = A.size() - 1;
    if(A[0] < A[end])
        return 0;
    
    while(start <= end)
    {
        int mid = (start + end)/2;
        
        if(A[mid] > A[mid + 1])
            return mid + 1;
        else if(A[start] <= A[mid])
        {
            start = mid + 1; //It means till this point it's sorted.
        }
        else
        {
            end = mid - 1;
            
        }
    }
    return 0;
}

int BinarySearch(const vector<int> &A, int start, int end,int value)
{
    while(start <= end)
    {
        int mid = (start + end)/2;
        
        if(A[mid] == value)
            return mid;
        else if(A[mid] > value)
        {
            end = mid - 1;
        }
        else
        {
            start = mid + 1;
        }
    }
    return -1;
    
    
}


int Solution::search(const vector<int> &A, int B)
{
    int pivotInd = findPivot(A);
    
    int first = BinarySearch(A,0,pivotInd - 1,B);
    int second = BinarySearch(A,pivotInd, A.size()-1,B);
    if(first != -1)
        return first;
    else
        return second;
    
    
}
