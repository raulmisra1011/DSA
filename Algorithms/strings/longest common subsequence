// Recursion
// index 1 starts with n-1 and index2 starts wiht m-1
 int solve(int index1, int index2,string &text1, string &text2)
    {
        if(index1 < 0 || index2 < 0) return 0;
        if(text1[index1] == text2[index2]) return 1+solve(index1-1,index2-1,text1,text2);
        else return max(solve(index1-1,index2,text1,text2),solve(index1,index2-1,text1,text2));
    }

// DP Memoization
int solve(int index1, int index2,string &text1, string &text2,vector<vector<int>> &dp)
    {
        if(index1 < 0 || index2 < 0) return 0;
        if(dp[index1][index2] != -1) return dp[index1][index2];
        if(text1[index1] == text2[index2]) dp[index1][index2] = 1+solve(index1-1,index2-1,text1,text2,dp);
        else dp[index1][index2] = max(solve(index1-1,index2,text1,text2,dp),solve(index1,index2-1,text1,text2,dp));
        return dp[index1][index2];
    }

// Tabulation or Bottom up Approach
int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();
        int dp[m+1][n+1];
        for(int i=0;i<m+1;i++)
        {
            for(int j=0;j<n+1;j++)
            {
                if(i==0 || j==0) dp[i][j] = 0;
            }
        }
        for(int i=1;i<m+1;i++)
        {
            for(int j=1;j<n+1;j++)
            {
                if(text1[i-1] == text2[j-1]) dp[i][j] = 1+dp[i-1][j-1];
                else dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[m][n];
    }

// Space Optimization
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size();
        int m = text2.size();
        vector<int> prev(m+1,0),curr(m+1,0);
        for(int j=0;j<m+1;j++) prev[j] = 0;
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                if(text1[i-1] == text2[j-1]) curr[j] = 1+prev[j-1];
                else curr[j] = max(prev[j],curr[j-1]);
            }
            prev = curr;
        }
        return prev[m];
    }
