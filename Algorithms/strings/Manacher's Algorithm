string Solution::longestPalindrome(string s1) 
{
    string s = "";

    if(s1.length() == 1)
        return s1;
    for(int i=0;i<s1.length();i++)
    {
        s += "#";
        s += s1[i];
    }

    s += "#";
    vector<int> lps(s.length(),0);

    int l=1;
    int r=1;

    for(int i=1;i<s.length()-1;i++)
    {
        lps[i] = max(0,min(r-i,lps[l+r-i]));
        while((i+lps[i] < s.length()) && (i-lps[i] >= 0) && (s[i+lps[i]] == s[i-lps[i]]))
        {
            lps[i]++;
        }
        if(i+lps[i] > r)
        {
            l = i- lps[i];
            r = i + lps[i];
        }
    }

    int ans = 0;
    int idx = 0;
    for(int i=0;i<lps.size();i++)
    {   
        //cout<<lps[i]<<" ";
        if(lps[i] > ans)
        {
            idx = i;
            ans = lps[i];
        }
    }

    //cout<<endl<<ans<<endl;
    string s5= "";
	for (int i = idx - ans + 1; i<idx + ans - 1; i++)
		{if (s[i] != '#')
			s5 += s[i];}
    return s5;
}
